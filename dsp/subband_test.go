package dsp

import (
	"math"
	"math/big"
	"testing"
)

func compareBySignficantDigits(t *testing.T, f1, f2 float64, precision int, signficance int) bool {
	t.Helper()

	F1 := big.NewFloat(f1).SetPrec(uint(precision))
	F2 := big.NewFloat(f2).SetPrec(uint(precision))

	if F1.Sign() != F2.Sign() {
		return false
	}

	s1 := F1.Text('f', precision)
	s2 := F2.Text('f', precision)

	if s1[0] == '-' {
		s1 = s1[1:]
	}
	if s2[0] == '-' {
		s2 = s2[1:]
	}

	for len(s1) > 0 && len(s2) > 0 && ((s1[0] == '.' && s2[0] == '.') || (s1[0] == '0' && s2[0] == '0')) {
		s1 = s1[1:]
		s2 = s2[1:]
	}

	if len(s1) == 0 && len(s2) == 0 {
		return true
	}
	if len(s1) != len(s2) && (len(s1) < signficance || len(s2) < signficance) {
		return false
	}

	for i := 0; i < signficance; i++ {
		if s1[i] != s2[i] {
			return false
		}
	}

	return true
}

func compareByTolerance(t *testing.T, f1, f2 float64, absolute float64, relative float64) bool {
	t.Helper()

	tolerance := absolute + relative*math.Abs(f2)

	return math.Abs(f1-f2) <= tolerance
}

// Compare with the output of `scipy.fft.dct`
func TestDCT32_Scipy(t *testing.T) {
	testCases := []struct {
		got  []float64
		want []float64
	}{
		{
			got: DCT32([]float64{
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
			}),
			want: []float64{
				0.0, 2.00241199, 0.0, 2.02188384,
				0.0, 2.06178924, 0.0, 2.12417036,
				0.0, 2.21241558, 0.0, 2.33173987,
				0.0, 2.49001649, 0.0, 2.69923337,
				0.0, 2.97814508, 0.0, 3.35739858,
				0.0, 3.89027295, 0.0, 4.67775973,
				0.0, 5.93665847, 0.0, 8.23112404,
				0.0, 13.63043367, 0.0, 40.76003249,
			},
		},
		{
			got: DCT32([]float64{
				0.00000000e+00, 1.95090322e-01, 3.82683432e-01, 5.55570233e-01,
				7.07106781e-01, 8.31469612e-01, 9.23879533e-01, 9.80785280e-01,
				1.00000000e+00, 9.80785280e-01, 9.23879533e-01, 8.31469612e-01,
				7.07106781e-01, 5.55570233e-01, 3.82683432e-01, 1.95090322e-01,
				1.22464680e-16, -1.95090322e-01, -3.82683432e-01, -5.55570233e-01,
				-7.07106781e-01, -8.31469612e-01, -9.23879533e-01, -9.80785280e-01,
				-1.00000000e+00, -9.80785280e-01, -9.23879533e-01, -8.31469612e-01,
				-7.07106781e-01, -5.55570233e-01, -3.82683432e-01, -1.95090322e-01,
			}),
			want: []float64{
				2.22044605e-16, 2.70642806e+01, -3.13654849e+00, -1.61861364e+01,
				2.17778080e-16, -3.82836379e+00, 9.47875655e-10, -1.76812694e+00,
				2.05142466e-16, -1.01826580e+00, 1.27065078e-09, -6.57001624e-01,
				1.84623342e-16, -4.53867859e-01, -1.80050469e-09, -3.27497986e-01,
				1.57009246e-16, -2.42889061e-01, 3.29392614e-09, -1.82861953e-01,
				1.23361373e-16, -1.38132090e-01, -3.16000953e-09, -1.03285003e-01,
				8.49727916e-17, -7.49505175e-02, -6.92284860e-09, -5.08969950e-02,
				4.33187535e-17, -2.95456654e-02, 6.69533184e-09, -9.68904199e-03,
			},
		},
		{
			got: DCT32([]float64{
				0.08172875100082977, 0.36953386373875685, -0.806351593557876, -0.05568409786067585,
				0.7702243803320863, -0.6166200502845958, 0.2782717690638761, -0.20591899369053013,
				0.4716388725222658, -0.1864348633624744, -0.08110637284650246, 0.293306488656099,
				-0.8322566371382356, -0.6194242401456351, 0.8015813297960714, -0.5304906920033632,
				0.6331687370939321, 0.15459757881345015, 0.30427311486875697, 0.7138973933995503,
				0.8625684428697538, -0.7539105112004991, -0.26469039858500154, 0.4951766600221683,
				-0.13790233387552453, -0.6169223748891548, 0.9825433779543369, 0.6532544246045444,
				0.18812702164665995, 0.7866238631848412, -0.6307692503650164, 0.8027341100819803,
			}),
			want: []float64{
				6.60953554, -5.35382925, 1.41502105, 0.79455765,
				2.33151022, -4.65525232, -2.50223597, 6.88660358,
				-1.27415344, 0.38942106, 0.56013465, -1.56115907,
				2.61334883, 3.22789576, 4.53457714, -4.68364898,
				7.21585116, 2.46007853, -0.80422702, 2.99343548,
				-6.72128393, -8.44270082, 7.35892585, -5.64324665,
				-2.06290699, -11.45587617, 0.31826618, -0.21918551,
				3.74750031, -1.11417661, 1.93972529, 6.43577694,
			},
		},
	}

	for _, tc := range testCases {
		for i := range tc.got {
			if !compareBySignficantDigits(t, tc.got[i], tc.want[i], 50, 6) {
				t.Logf(
					"Bin has different significant digits.\ngot[%[1]d]:\n%.50[2]f,\nwant[%[1]d]:\n%.50[3]f\n",
					i, tc.got[i], tc.want[i],
				)
			}
			if !compareByTolerance(t, tc.got[i], tc.want[i], 1e-12, 1e-08) {
				t.Errorf(
					"Bin is incorrect.\ngot[%[1]d]:\n%.50[2]f,\nwant[%[1]d]:\n%.50[3]f\n",
					i, tc.got[i], tc.want[i],
				)
			}
		}
	}
}

func TestDCT32ByDFT_Scipy(t *testing.T) {
	testCases := []struct {
		got  []float64
		want []float64
	}{
		{
			got: DCT32ByDFT([]float64{
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
			}),
			want: []float64{
				0.0, 2.00241199, 0.0, 2.02188384,
				0.0, 2.06178924, 0.0, 2.12417036,
				0.0, 2.21241558, 0.0, 2.33173987,
				0.0, 2.49001649, 0.0, 2.69923337,
				0.0, 2.97814508, 0.0, 3.35739858,
				0.0, 3.89027295, 0.0, 4.67775973,
				0.0, 5.93665847, 0.0, 8.23112404,
				0.0, 13.63043367, 0.0, 40.76003249,
			},
		},
		{
			got: DCT32ByDFT([]float64{
				0.00000000e+00, 1.95090322e-01, 3.82683432e-01, 5.55570233e-01,
				7.07106781e-01, 8.31469612e-01, 9.23879533e-01, 9.80785280e-01,
				1.00000000e+00, 9.80785280e-01, 9.23879533e-01, 8.31469612e-01,
				7.07106781e-01, 5.55570233e-01, 3.82683432e-01, 1.95090322e-01,
				1.22464680e-16, -1.95090322e-01, -3.82683432e-01, -5.55570233e-01,
				-7.07106781e-01, -8.31469612e-01, -9.23879533e-01, -9.80785280e-01,
				-1.00000000e+00, -9.80785280e-01, -9.23879533e-01, -8.31469612e-01,
				-7.07106781e-01, -5.55570233e-01, -3.82683432e-01, -1.95090322e-01,
			}),
			want: []float64{
				2.22044605e-16, 2.70642806e+01, -3.13654849e+00, -1.61861364e+01,
				2.17778080e-16, -3.82836379e+00, 9.47875655e-10, -1.76812694e+00,
				2.05142466e-16, -1.01826580e+00, 1.27065078e-09, -6.57001624e-01,
				1.84623342e-16, -4.53867859e-01, -1.80050469e-09, -3.27497986e-01,
				1.57009246e-16, -2.42889061e-01, 3.29392614e-09, -1.82861953e-01,
				1.23361373e-16, -1.38132090e-01, -3.16000953e-09, -1.03285003e-01,
				8.49727916e-17, -7.49505175e-02, -6.92284860e-09, -5.08969950e-02,
				4.33187535e-17, -2.95456654e-02, 6.69533184e-09, -9.68904199e-03,
			},
		},
		{
			got: DCT32ByDFT([]float64{
				0.08172875100082977, 0.36953386373875685, -0.806351593557876, -0.05568409786067585,
				0.7702243803320863, -0.6166200502845958, 0.2782717690638761, -0.20591899369053013,
				0.4716388725222658, -0.1864348633624744, -0.08110637284650246, 0.293306488656099,
				-0.8322566371382356, -0.6194242401456351, 0.8015813297960714, -0.5304906920033632,
				0.6331687370939321, 0.15459757881345015, 0.30427311486875697, 0.7138973933995503,
				0.8625684428697538, -0.7539105112004991, -0.26469039858500154, 0.4951766600221683,
				-0.13790233387552453, -0.6169223748891548, 0.9825433779543369, 0.6532544246045444,
				0.18812702164665995, 0.7866238631848412, -0.6307692503650164, 0.8027341100819803,
			}),
			want: []float64{
				6.60953554, -5.35382925, 1.41502105, 0.79455765,
				2.33151022, -4.65525232, -2.50223597, 6.88660358,
				-1.27415344, 0.38942106, 0.56013465, -1.56115907,
				2.61334883, 3.22789576, 4.53457714, -4.68364898,
				7.21585116, 2.46007853, -0.80422702, 2.99343548,
				-6.72128393, -8.44270082, 7.35892585, -5.64324665,
				-2.06290699, -11.45587617, 0.31826618, -0.21918551,
				3.74750031, -1.11417661, 1.93972529, 6.43577694,
			},
		},
	}

	for _, tc := range testCases {
		for i := range tc.got {
			if !compareBySignficantDigits(t, tc.got[i], tc.want[i], 50, 6) {
				t.Logf(
					"Bin has different significant digits.\ngot[%[1]d]:\n%.50[2]f,\nwant[%[1]d]:\n%.50[3]f\n",
					i, tc.got[i], tc.want[i],
				)
			}
			if !compareByTolerance(t, tc.got[i], tc.want[i], 1e-12, 1e-08) {
				t.Errorf(
					"Bin is incorrect.\ngot[%[1]d]:\n%.50[2]f,\nwant[%[1]d]:\n%.50[3]f\n",
					i, tc.got[i], tc.want[i],
				)
			}
		}
	}
}

func TestDCT32ByFFTW_Scipy(t *testing.T) {
	testCases := []struct {
		got  []float64
		want []float64
	}{
		{
			got: DCT32ByFFTW([]float64{
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
				1.0, -1.0, 1.0, -1.0,
			}),
			want: []float64{
				0.0, 2.00241199, 0.0, 2.02188384,
				0.0, 2.06178924, 0.0, 2.12417036,
				0.0, 2.21241558, 0.0, 2.33173987,
				0.0, 2.49001649, 0.0, 2.69923337,
				0.0, 2.97814508, 0.0, 3.35739858,
				0.0, 3.89027295, 0.0, 4.67775973,
				0.0, 5.93665847, 0.0, 8.23112404,
				0.0, 13.63043367, 0.0, 40.76003249,
			},
		},
		{
			got: DCT32ByFFTW([]float64{
				0.00000000e+00, 1.95090322e-01, 3.82683432e-01, 5.55570233e-01,
				7.07106781e-01, 8.31469612e-01, 9.23879533e-01, 9.80785280e-01,
				1.00000000e+00, 9.80785280e-01, 9.23879533e-01, 8.31469612e-01,
				7.07106781e-01, 5.55570233e-01, 3.82683432e-01, 1.95090322e-01,
				1.22464680e-16, -1.95090322e-01, -3.82683432e-01, -5.55570233e-01,
				-7.07106781e-01, -8.31469612e-01, -9.23879533e-01, -9.80785280e-01,
				-1.00000000e+00, -9.80785280e-01, -9.23879533e-01, -8.31469612e-01,
				-7.07106781e-01, -5.55570233e-01, -3.82683432e-01, -1.95090322e-01,
			}),
			want: []float64{
				2.22044605e-16, 2.70642806e+01, -3.13654849e+00, -1.61861364e+01,
				2.17778080e-16, -3.82836379e+00, 9.47875655e-10, -1.76812694e+00,
				2.05142466e-16, -1.01826580e+00, 1.27065078e-09, -6.57001624e-01,
				1.84623342e-16, -4.53867859e-01, -1.80050469e-09, -3.27497986e-01,
				1.57009246e-16, -2.42889061e-01, 3.29392614e-09, -1.82861953e-01,
				1.23361373e-16, -1.38132090e-01, -3.16000953e-09, -1.03285003e-01,
				8.49727916e-17, -7.49505175e-02, -6.92284860e-09, -5.08969950e-02,
				4.33187535e-17, -2.95456654e-02, 6.69533184e-09, -9.68904199e-03,
			},
		},
		{
			got: DCT32ByFFTW([]float64{
				0.08172875100082977, 0.36953386373875685, -0.806351593557876, -0.05568409786067585,
				0.7702243803320863, -0.6166200502845958, 0.2782717690638761, -0.20591899369053013,
				0.4716388725222658, -0.1864348633624744, -0.08110637284650246, 0.293306488656099,
				-0.8322566371382356, -0.6194242401456351, 0.8015813297960714, -0.5304906920033632,
				0.6331687370939321, 0.15459757881345015, 0.30427311486875697, 0.7138973933995503,
				0.8625684428697538, -0.7539105112004991, -0.26469039858500154, 0.4951766600221683,
				-0.13790233387552453, -0.6169223748891548, 0.9825433779543369, 0.6532544246045444,
				0.18812702164665995, 0.7866238631848412, -0.6307692503650164, 0.8027341100819803,
			}),
			want: []float64{
				6.60953554, -5.35382925, 1.41502105, 0.79455765,
				2.33151022, -4.65525232, -2.50223597, 6.88660358,
				-1.27415344, 0.38942106, 0.56013465, -1.56115907,
				2.61334883, 3.22789576, 4.53457714, -4.68364898,
				7.21585116, 2.46007853, -0.80422702, 2.99343548,
				-6.72128393, -8.44270082, 7.35892585, -5.64324665,
				-2.06290699, -11.45587617, 0.31826618, -0.21918551,
				3.74750031, -1.11417661, 1.93972529, 6.43577694,
			},
		},
	}

	for _, tc := range testCases {
		for i := range tc.got {
			if !compareBySignficantDigits(t, tc.got[i], tc.want[i], 50, 6) {
				t.Logf(
					"Bin has different significant digits.\ngot[%[1]d]:\n%.50[2]f,\nwant[%[1]d]:\n%.50[3]f\n",
					i, tc.got[i], tc.want[i],
				)
			}
			if !compareByTolerance(t, tc.got[i], tc.want[i], 1e-12, 1e-08) {
				t.Errorf(
					"Bin is incorrect.\ngot[%[1]d]:\n%.50[2]f,\nwant[%[1]d]:\n%.50[3]f\n",
					i, tc.got[i], tc.want[i],
				)
			}
		}
	}
}
